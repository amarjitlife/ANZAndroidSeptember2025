
package learnKotlin


//_____________________________________________________________

// What Is Generics?
//      It's Code Which Will Generate Code
//      Code Template/Directive To Compiler To Generate Code 
//      Compile Time Polymorphism

//_____________________________________________________________

// Code Tempelate
//      Polymorphic Function
//          Using Mechanism Of Generics <T>
//          Using Mechanism Of Default Arguments
fun <T> Collection<T>.joinToStringFinal(
    separator: String = ", ",
    prefix: String = "",
    postfix: String = ""
) : String {

    val result = StringBuilder( prefix )
    for ( ( index, element ) in this.withIndex() ) {
        if ( index > 0 ) result.append( separator )
        result.append( element)
    }

    result.append( postfix )
    return result.toString()
}

/*
//_____________________________________________________________
    // val numbers: ArrayList<Integer> = listOf( 10, 20, 30, 40, 50 ) // ArrayList<Integer>
    // <T> Place Holder To Be Sustituted With Integer Type
// Following Code Will Be Generated By Compiler
//      At Compile Time
fun <Integer> Collection<Integer>.joinToStringFinal(
    separator: String = ", ",
    prefix: String = "",
    postfix: String = ""
) : String {

    val result = StringBuilder( prefix )
    for ( ( index, element ) in this.withIndex() ) {
        if ( index > 0 ) result.append( separator )
        result.append( element)
    }

    result.append( postfix )
    return result.toString()
}

//_____________________________________________________________
    // val names: ArrayList<String> = listOf( "Alice", "Martin", "Chandan", "Eshwari" ) // ArrayList<String>
    // // <T> Place Holder To Be Sustituted With String Type

fun <String> Collection<String>.joinToStringFinal(
    separator: String = ", ",
    prefix: String = "",
    postfix: String = ""
) : String {

    val result = StringBuilder( prefix )
    for ( ( index, element ) in this.withIndex() ) {
        if ( index > 0 ) result.append( separator )
        result.append( element)
    }

    result.append( postfix )
    return result.toString()
}
*/

//_____________________________________________________________

fun playWithJoinToStringFinal() {
    val numbers: ArrayList<Integer> = listOf( 10, 20, 30, 40, 50 ) // ArrayList<Integer>
    // <T> Place Holder To Be Sustituted With Integer Type
    println( numbers.joinToStringFinal( " ; ", "( ", " )" ))
    println( numbers.joinToStringFinal() )
    println( numbers.joinToStringFinal( " ; " ))
    println( numbers.joinToStringFinal( " ; ", "( " ))

    val names: ArrayList<String> = listOf( "Alice", "Martin", "Chandan", "Eshwari" ) // ArrayList<String>
    // <T> Place Holder To Be Sustituted With String Type
    println( names.joinToStringFinal( " ; ", "( ", " )" ))
    println( names.joinToStringFinal() )
    println( names.joinToStringFinal( " ; " ))
    println( names.joinToStringFinal( " ; ", "( " ))
}

//_____________________________________________________________
//_____________________________________________________________
//_____________________________________________________________
//_____________________________________________________________

fun main() {
    println("\nFunction: playWithJoinToStringFinal")
    playWithJoinToStringFinal()

    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
    // println("\nFunction: ")  
}


